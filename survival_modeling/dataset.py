from sklearn.preprocessing import StandardScaler
import torch
from torch.utils.data import Dataset
import os
import pandas as pd
import json


class CoAttnData(Dataset):
    def __init__(self, task="KIRC", num_bins=4, fold=0, mode="train", settings="PaRa_MIL"):
        super(CoAttnData, self).__init__()

        json_path = f"./survival_modeling/splits/json_{task.lower()}/"
        self.fold = fold
        with open(os.path.join(json_path, f"fold_{self.fold}.json"), "r") as f:
            self.patients = json.load(f)[mode]

        self.bins = num_bins
        self.label_path = f"./survival_modeling/preparation/clinical_info_clean_{task.lower()}.csv"
        self.labels = pd.read_csv(self.label_path, index_col="patient")
        # label_data = pd.read_csv(self.label_path)
        # label_bins, cut_point = pd.qcut(label_data["time"], self.bins, labels=[0, 1, 2, 3], retbins=True)
        # label_bins = label_bins.to_frame("time_bins")
        # self.labels = pd.concat([label_data, label_bins], axis=1).set_index("patient")

        # define pathomics path generated by pretraining graph
        self.setting = settings
        self.pathomics_para_mil_base = f"./data/{task}/TCGA-{task}/patch_features_merged/"
        self.pathomics_para_mil_wo_base = f"./data/{task}/TCGA-{task}/patch_features_resnet/"

        # define radiomics path generated by PyRadiomics
        radiomics_base = f"./data/{task}/TCIA-{task}/summary_radiomics.csv"
        radiomics_data = pd.read_csv(radiomics_base).set_index("imageFile").loc[self.patients, :]
        all_columns = list(radiomics_data.columns)
        diagnostic_cols = sorted(list(filter(lambda x: "diagnostics" in x, all_columns)))
        shape_cols = sorted(list(filter(lambda x: "original_shape" in x, all_columns)))
        order_cols = sorted(list(filter(lambda x: "original_firstorder" in x, all_columns)))
        texture_cols = sorted(list(filter(lambda x: ("original_glcm" in x) or ("original_gldm" in x)
                                          or ("original_glrlm" in x) or ("original_glszm" in x)
                                          or ("original_ngtdm" in x), all_columns)))
        log_cols = sorted(list(filter(lambda x: "log-sigma" in x, all_columns)))
        wavelet_cols = sorted(list(filter(lambda x: "wavelet" in x, all_columns)))
        assert len(all_columns) == len(diagnostic_cols) + len(shape_cols) + len(order_cols) \
               + len(texture_cols) + len(log_cols) + len(wavelet_cols)

        # perform ss for radiomics data
        radiomics_data = radiomics_data.drop(diagnostic_cols, axis=1)
        ss = StandardScaler()
        radio_data = pd.DataFrame(ss.fit_transform(radiomics_data),
                                  index=radiomics_data.index,
                                  columns=radiomics_data.columns)
        self.shape = radio_data[shape_cols]
        self.order = radio_data[order_cols]
        self.texture = radio_data[texture_cols]
        self.log_sigma = radio_data[log_cols]
        self.wavelet = radio_data[wavelet_cols]

        # define radiomics path generated by RadFM
        self.radio_cnn_path = f"./data/{task}/TCIA-{task}/img_nii_features/"

    def __len__(self):
        return len(self.patients)

    def __getitem__(self, item):
        patient_name = self.patients[item]

        labels = self.labels.loc[patient_name]
        surv_discrete = labels["time_bins"]
        surv_time = labels["time"]
        censor = 1 - labels["event"]

        # pathological data
        if self.setting == "PaRa_MIL_wo":
            patho = torch.load(os.path.join(self.pathomics_para_mil_wo_base, f"{patient_name}.pt")).to(torch.float32)
        else:
            patho = torch.load(os.path.join(self.pathomics_para_mil_base, f"{patient_name}.pt")).to(torch.float32)

        # radiological data
        radio_shape = torch.from_numpy(self.shape.loc[patient_name, :].values).to(torch.float32)
        radio_order = torch.from_numpy(self.order.loc[patient_name, :].values).to(torch.float32)
        radio_texture = torch.from_numpy(self.texture.loc[patient_name, :].values).to(torch.float32)
        radio_log_sigma = torch.from_numpy(self.log_sigma.loc[patient_name, :].values).to(torch.float32)
        radio_wavelet = torch.from_numpy(self.wavelet.loc[patient_name, :].values).to(torch.float32)

        # RadFM data
        radio_cnn = torch.load(os.path.join(self.radio_cnn_path, f"{patient_name}.pt")).squeeze(0).to(torch.float32)

        data = [patho, radio_shape, radio_order, radio_texture, radio_log_sigma, radio_wavelet, radio_cnn,
                surv_discrete, surv_time, censor, patient_name]

        return data


