from sklearn.preprocessing import StandardScaler
import torch
from torch.utils.data import Dataset
import os
import pandas as pd
import json
from typing import List
from itertools import chain


class CoAttnData(Dataset):
    def __init__(self, task: List, codebook_dict: dict, num_bins=4, fold=0, mode="train"):
        super(CoAttnData, self).__init__()

        self.fold = fold
        self.bins = num_bins
        self.name_dict = codebook_dict

        all_patients = []
        all_labels = pd.DataFrame()
        all_config_dicts = {}

        for task_name in sorted(task):
            # dataset split, combining patients in all tasks
            json_path = f"./survival_modeling/splits/json_{task_name.lower()}/"
            with open(os.path.join(json_path, f"fold_{self.fold}.json"), "r") as f:
                task_patients = json.load(f)[mode]
            all_patients.append(task_patients)

            # get discrete survival label
            task_label_path = f"./survival_modeling/preparation/clinical_info_clean_{task_name.lower()}.csv"
            task_labels = pd.read_csv(task_label_path, index_col="patient")
            all_labels = pd.concat([all_labels, task_labels], axis=0)

            # define pathomics path generated by pretraining graph
            pathomics_para_mil_base = f"./data/{task_name}/TCGA-{task_name}/patch_features_merged/"

            # define radiomics path generated by PyRadiomics
            radiomics_base = f"./data/{task_name}/TCIA-{task_name}/summary_radiomics.csv"
            radiomics_data = pd.read_csv(radiomics_base).set_index("imageFile").loc[task_patients, :]
            all_columns = list(radiomics_data.columns)
            diagnostic_cols = sorted(list(filter(lambda x: "diagnostics" in x, all_columns)))
            shape_cols = sorted(list(filter(lambda x: "original_shape" in x, all_columns)))
            order_cols = sorted(list(filter(lambda x: "original_firstorder" in x, all_columns)))
            texture_cols = sorted(list(filter(lambda x: ("original_glcm" in x) or ("original_gldm" in x)
                                                        or ("original_glrlm" in x) or ("original_glszm" in x)
                                                        or ("original_ngtdm" in x), all_columns)))
            log_cols = sorted(list(filter(lambda x: "log-sigma" in x, all_columns)))
            wavelet_cols = sorted(list(filter(lambda x: "wavelet" in x, all_columns)))
            assert len(all_columns) == len(diagnostic_cols) + len(shape_cols) + len(order_cols) \
                   + len(texture_cols) + len(log_cols) + len(wavelet_cols)

            # perform ss for radiomics data
            radiomics_data = radiomics_data.drop(diagnostic_cols, axis=1)
            ss = StandardScaler()
            radio_data = pd.DataFrame(ss.fit_transform(radiomics_data),
                                      index=radiomics_data.index,
                                      columns=radiomics_data.columns)
            shape = radio_data[shape_cols]
            order = radio_data[order_cols]
            texture = radio_data[texture_cols]
            log_sigma = radio_data[log_cols]
            wavelet = radio_data[wavelet_cols]

            # define radiomics path generated by RadFM
            radio_cnn_path = f"./data/{task_name}/TCIA-{task_name}/img_nii_features/"

            all_config_dicts[task_name] = {"pathomics": pathomics_para_mil_base,
                                           "shape": shape, "order": order, "texture": texture, "log_sigma": log_sigma,
                                           "wavelet": wavelet, "radfm": radio_cnn_path}
        self.config = all_config_dicts
        self.patients = list(chain(*all_patients))
        self.labels = all_labels

    def __len__(self):
        return len(self.patients)

    def __getitem__(self, item):
        patient_name = self.patients[item]
        task_id = self.name_dict[patient_name]
        config_dict = self.config[task_id]

        labels = self.labels.loc[patient_name]
        surv_discrete = labels["time_bins"]
        surv_time = labels["time"]
        censor = 1 - labels["event"]

        # pathological data
        patho = torch.load(os.path.join(config_dict["pathomics"], f"{patient_name}.pt")).to(torch.float32)

        # radiological data
        radio_shape = torch.from_numpy(config_dict["shape"].loc[patient_name, :].values).to(torch.float32)
        radio_order = torch.from_numpy(config_dict["order"].loc[patient_name, :].values).to(torch.float32)
        radio_texture = torch.from_numpy(config_dict["texture"].loc[patient_name, :].values).to(torch.float32)
        radio_log_sigma = torch.from_numpy(config_dict["log_sigma"].loc[patient_name, :].values).to(torch.float32)
        radio_wavelet = torch.from_numpy(config_dict["wavelet"].loc[patient_name, :].values).to(torch.float32)

        # RadFM data
        radio_cnn = torch.load(os.path.join(config_dict["radfm"], f"{patient_name}.pt")).squeeze(0).to(torch.float32)

        data = [patho, radio_shape, radio_order, radio_texture, radio_log_sigma, radio_wavelet, radio_cnn,
                surv_discrete, surv_time, censor, patient_name]

        return data


